cmake_minimum_required(VERSION 3.4)
string(REGEX MATCH "[0-9]+\\.[0-9]+\\.[0-9]" APP_VERSION "{{appVersion}}")
string(REGEX REPLACE " " "" TARGET_NAME "{{appName}}")

project("{{appName}}" VERSION ${APP_VERSION} LANGUAGES CXX)

set(CMAKE_VERBOSE_MAKEFILE ON)
set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_AUTOMOC ON)

include(GNUInstallDirs)

if (MSVC)
    string(REGEX REPLACE "/W[1-3]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
else ()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Wno-unused-variable")
endif ()
# On  Windows only static builds are supported.
if (WIN32)
    set(BUILD_SHARED_LIBS OFF)
endif ()

find_package(QT NAMES Qt6 Qt5 COMPONENTS Core REQUIRED)
find_package(Qt${QT_VERSION_MAJOR} COMPONENTS Core Gui Network REQUIRED)

find_package(ZLIB REQUIRED)

add_library(client
{{#models}}
{{#model}}
    {{classname}}.cpp
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}
{{#operations}}
    {{classname}}.cpp
{{/operations}}
{{/apis}}
{{/apiInfo}}
    {{prefix}}Helpers.cpp
    {{prefix}}HttpRequest.cpp
    {{prefix}}HttpFileElement.cpp
    {{prefix}}Oauth.cpp
)
target_include_directories(client PUBLIC
   $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
   $<INSTALL_INTERFACE:include/OpenAPI/${TARGET_NAME}>
)

add_library(OpenAPI::${TARGET_NAME} ALIAS client)

target_link_libraries(client PRIVATE Qt${QT_VERSION_MAJOR}::Core Qt${QT_VERSION_MAJOR}::Network Qt${QT_VERSION_MAJOR}::Gui ZLIB::ZLIB)

set_target_properties(client PROPERTIES
                CXX_STANDARD 14
                CXX_STANDARD_REQUIRED ON
                CXX_EXTENSIONS OFF
                OUTPUT_NAME ${TARGET_NAME}
                EXPORT_NAME ${TARGET_NAME}
                VERSION ${APP_VERSION}
                SOVERSION 1)

set(HEADER
{{#models}}
{{#model}}
    {{classname}}.h
{{/model}}
{{/models}}
{{#apiInfo}}
{{#apis}}
{{#operations}}
    {{classname}}.h
{{/operations}}
{{/apis}}
{{/apiInfo}}
    {{prefix}}Enum.h
    {{prefix}}Helpers.h
    {{prefix}}HttpRequest.h
    {{prefix}}HttpFileElement.h
    {{prefix}}Oauth.h
    {{prefix}}Object.h
)
install(FILES ${HEADER} DESTINATION include/OpenAPI/${TARGET_NAME})

include(CMakePackageConfigHelpers)

# openapi-generator-cli doesn't allow us to add extra files and the
# Config.cmake it ships is not usable...
file(WRITE "${CMAKE_CURRENT_BINARY_DIR}/Config.cmake.in"
"@PACKAGE_INIT@
include(CMakeFindDependencyMacro)
find_dependency(Qt${QT_VERSION_MAJOR}Core)
find_dependency(Qt${QT_VERSION_MAJOR}Gui)
find_dependency(Qt${QT_VERSION_MAJOR}Network)

include(\"\${CMAKE_CURRENT_LIST_DIR}/@TARGET_NAME@Targets.cmake\")"
)

configure_package_config_file(
        "${CMAKE_CURRENT_BINARY_DIR}/Config.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}Config.cmake"
        INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${TARGET_NAME}
)

write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}ConfigVersion.cmake"
  VERSION ${APP_VERSION}
  COMPATIBILITY SameMajorVersion )

install(TARGETS client EXPORT ${TARGET_NAME}Targets RUNTIME DESTINATION bin LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR})
install(EXPORT ${TARGET_NAME}Targets DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${TARGET_NAME} NAMESPACE OpenAPI::)
install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}Config.cmake" "${CMAKE_CURRENT_BINARY_DIR}/${TARGET_NAME}ConfigVersion.cmake"  DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/${TARGET_NAME})
